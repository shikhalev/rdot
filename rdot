#!/usr/bin/ruby -Ku

module RDot
	class << self

		def owner_class(method)
			owner = method.owner
			smod = owner.inspect
			if smod[0..7] == "#<Class:"
				sres = smod[8..smod.index(">")-1]
				begin
					eval sres
				rescue Exception
					owner
				end
			else
				owner
			end
		end

		attr_reader :sources

		def register_source(mod,scope,symbol,source)
			if Array === source && source.size != 0
				if @sources == nil
					@sources = {}
				end
				if @sources[mod] == nil
					@sources[mod] = {}
				end
				if @sources[mod][scope] == nil
					@sources[mod][scope] = {}
				end
				@sources[mod][scope][symbol] = source[0]
			end
		end

		def get_source(mod,scope,symbol)
			if @sources == nil || @sources[mod] == nil || @sources[mod][scope] == nil
				nil
			else
				@sources[mod][scope][symbol]
			end
		end

		attr_reader :modules

		def register_method(mod,scope,access,symbol,preloaded)

		end

		def register_const(mod,const,preloaded)
			if mod.const_defined? const
				value = mod.const_get(const)
				mod.ancestors.each do |anc|
					if anc != mod && anc.const_defined?(const)
						if anc.const_get(const) == value
							return nil
						end
					end
				end
				if @modules[mod][:constants] == nil
					@modules[mod][:constants] = {}
				end
				if @modules[mod][:constants][const] == nil
					@modules[mod][:constants][const] = {}
				end
				oldvalue = @modules[mod][:constants][const][:value]
				if oldvalue != value
					@modules[mod][:constants][const][:value] = value
					@modules[mod][:constants][const][:preloaded] = preloaded
				end
			end
		end

		def register_module(mod,preloaded)
			if @modules == nil
				@modules = {}
			end
			if @modules[mod] == nil
				@modules[mod] = {}
			end
			mod.public_methods(false).each do |method|
				register_method mod, :class, :public, method.intern, preloaded
			end
			mod.protected_methods(false).each do |method|
				register_method mod, :class, :protected, method.intern, preloaded
			end
			mod.private_methods(false).each do |method|
				register_method mod, :class, :private, method.intern, preloaded
			end
			mod.public_instance_methods(false).each do |method|
				register_method mod, :instance, :public, method.intern, preloaded
			end
			mod.protected_instance_methods(false).each do |method|
				register_method mod, :instance, :protected, method.intern, preloaded
			end
			mod.private_instance_methods(false).each do |method|
				register_method mod, :instance, :private, method.intern, preloaded
			end
			mod.constants.each do |const|
				register_const mod, const.intern, preloaded
			end
		end

		def scan_modules(preloaded)
			ObjectSpace.each_object Module do |mod|
				register_module mod, preloaded
			end
		end
	end
end

RDot.scan_modules(true)

class Module
	def method_added(method)
		RDot.register_source self, :instance, method, caller
	end
	def singleton_method_added(method)
		RDot.register_source self, :class, method, caller
	end
end

require "optparse"

module RDot

	VERSION = "0.9.2"
	if $stdout.stat.chardev?
		TITLE = "\e[1mRDot v#{RDot::VERSION}\e[0m - GraphViz class diagrams" +
				" for Ruby\n\thttp://github.com/shikhalev/rdot/"
	else
		TITLE = "RDot v#{RDot::VERSION} - GraphViz class diagrams for Ruby\n" +
				"\thttp://github.com/shikhalev/rdot/"
	end
	AUTHOR = "Ivan Shikhalev <shikhalev@gmail.com>\n" +
			"\thttp://github.com/shikhalev/"
	LICENSE = "GNU General Public License, see COPYING\n" +
			"\thttp://www.gnu.org/licenses/gpl.html"

	module Options

		@output = $stdout
		@excludes = []
		@includes = []
		@title = nil
		@color_class = "mediumaquamarine"
		@color_class_preloaded = "mediumseagreen"
		@color_class_evaluated = "aquamarine"
		@color_exception = "lightcoral"
		@color_exception_preloaded = "chocolate"
		@color_exception_evaluated = "lightpink"
		@color_module = "skyblue"
		@color_module_preloaded = "steelblue"
		@color_inherited = "steelblue"
		@color_included = "skyblue"
		@color_extended = "olivedrab"
		@color_protected = "#DDDDDD"
		@color_private = "#BBBBBB"
		@show_protected = false
		@show_private = false
		@show_preloaded = false
		@hide_methods = false
		@hide_constants = false
		@exceptions = []
		class << self
			attr_reader :output, :includes, :excludes, :title, :color_class,
					:color_class_preloaded, :color_class_evaluated,
					:color_exception, :color_exception_preloaded,
					:color_exception_evaluated, :color_module,
					:color_module_preloaded, :color_inherited, :color_included,
					:color_extended, :color_protected, :color_private,
					:show_protected, :show_private, :show_preloaded,
					:hide_constants, :hide_methods, :exceptions

			def except?(mod)
				@exceptions.each do |cls|
					if mod <= cls
						return true
					end
				end
				return false
			end
		end
		opts = OptionParser.new
		opts.on("-h","--help",
				"Show short help and exit.") do
			puts "#{RDot::TITLE}\n\n#{opts.to_s}"
			exit 0
		end
		opts.on("-I","--info","=[INFO]",Array,
				"Show some program information and exit.",
				"Argument may by comma-separated set of:",
				"    'about' - title with version",
				"               and homepage,",
				"    'author' - author name with e-mail,",
				"    'license' - license info,",
				"    'usage' - command line arguments,",
				"    'version' - current version;",
				"or one of predefined sets:",
				"    'all' = 'about,author,license,usage',",
				"    'help' = 'about,usage',",
				"    'info' (or no argument) =",
		        "                  'about,author,license'.") do |arg|
			if arg == nil || arg == ["info"]
				arg = ["about","author","license"]
			elsif arg == ["all"]
				arg = ["about","author","license","usage"]
			elsif arg == ["help"]
				arg = ["about","usage"]
			end
			arg.each_with_index do |value,index|
				case value
				when "about"
					puts "#{RDot::TITLE}"
					if index < arg.size-1
						puts ""
					end
				when "author"
					if arg.size > 1
						puts "Author: #{RDot::AUTHOR}"
					else
						puts "#{RDot::AUTHOR}"
					end
				when "license"
					if arg.size > 1
						puts "License: #{RDot::LICENSE}"
					else
						puts "#{RDot::LICENSE}"
					end
				when "usage"
					if index > 0 && ! (arg[index-1] == "about")
						puts ""
					end
					puts "#{opts.to_s}"
				when "version"
					if ! arg.include? "about"
						if arg.size > 1
							puts "Version: #{RDot::VERSION}"
						else
							puts "#{RDot::VERSION}"
						end
					end
				end
			end
			exit 0
		end
		opts.on("--about",
				"Show program title with version and exit.") do
			puts "#{RDot::TITLE}"
			exit 0
		end
		opts.on("--author",
				"Show author information and exit.") do
			puts "#{RDot::AUTHOR}"
			exit 0
		end
		opts.on("-L","--license",
				"Show license information and exit.") do
			puts "#{RDot::LICENSE}"
			exit 0
		end
		opts.on("-?","--usage",
				"Show command line arguments and exit.") do
			puts "#{opts.to_s}"
			exit 0
		end
		opts.on("-V","--version",
				"Show version and exit.") do
			puts "#{RDot::VERSION}"
			exit 0
		end
		opts.on("-x","--exclude","-p","--preload","=LIBS",Array,
				"Comma-separated list of libraries",
				"which must be excluded from output graph.",
				"This libs will be preloaded before start",
				"registering any changes like standard",
				"objects.") do |arg|
			@excludes += arg
		end
		opts.on("-i","--include","--input","=LIBS",Array,
				"Comma-separated list of libraries for",
				"processing. Also libs may be specified",
				"in command line without any key.") do |arg|
			@includes += arg
		end
		opts.on("-o","--output","=[FILE]",String,
				"Send output to file instead stdout.",
				"'rdot.dot' if no argument specified.") do |arg|
			if arg == nil
				arg = 'rdot.dot'
			end
			@output = File.open(arg,"w")
		end
		opts.on("-t","--title","=TITLE",String,
				"Set graph title.") do |arg|
			@title = arg
		end
		opts.on("--color-class","=COLOR",String,
				"Set class-node color. See:",
				"http://graphviz.org/doc/info/colors.html") do |arg|
			@color_class = arg
		end
		opts.on("--color-class-preloaded","=COLOR",String,
				"Set node color for preloaded classes.") do |arg|
			@color_class_preloaded = arg
		end
		opts.on("--color-class-evaluated","=COLOR",String,
				"Set node color for evaluated classes.") do |arg|
			@color_class_evaluated = arg
		end
		opts.on("--color-exception","=COLOR",String,
				"Set node color for exception classes.") do |arg|
			@color_exception = arg
		end
		opts.on("--color-exception-preloaded","=COLOR",String,
				"Set node color for preloaded exceptions.") do |arg|
			@color_exception_preloaded = arg
		end
		opts.on("--color-exception-evaluated","=COLOR",String,
				"Set node color for evaluated exceptions.") do |arg|
			@color_exception_evaluated = arg
		end
		opts.on("--color-module","=COLOR",String,
				"Set node color for modules.") do |arg|
			@color_module = arg
		end
		opts.on("--color-module-preloaded","=COLOR",String,
				"Set node color for preloaded modules.") do |arg|
			@color_module_preloaded = arg
		end
		opts.on("--color-inherited","=COLOR",String,
				"Set inheritance-edge color.") do |arg|
			@color_inherited = arg
		end
		opts.on("--color-included","=COLOR",String,
				"Set include-edge color.") do |arg|
			@color_included = arg
		end
		opts.on("--color-extended","=COLOR",String,
				"Set extension-edge color.") do |arg|
			@color_extended = arg
		end
		opts.on("--color-protected","=COLOR",String,
				"Set color marker for protected methods.") do |arg|
			@color_protected = arg
		end
		opts.on("--color-private","=COLOR",String,
				"Set color marker for private methods.") do |arg|
			@color_private = arg
		end
		opts.on("-s","--show-protected",TrueClass,
				"Show public and protected methods.") do
			@show_protected = true
		end
		opts.on("-S","--show-private",TrueClass,
				"Show public, protected and private methods.") do
			@show_private = true
		end
		opts.on("-z","--show-preloaded",TrueClass,
				"Show methods etc. for preloaded classes.",
				"Use this to see the structure of standard",
				"Ruby classes.") do
			@show_preloaded = true
		end
		opts.on("-M","--hide-methods",TrueClass,
				"Hide all methods from diagram.") do
			@hide_methods = true
		end
		opts.on("-C","--hide-constants",TrueClass,
				"Hide all constants.") do
			@hide_constants = true
		end
		opts.on("-e","--except","=[LIST]",Array,
				"Except classes (with children) from",
		        "processing. If no classes specified,",
		        "the Exception will excepted.") do |arg|
			if arg == nil
				@exceptions << Exception
			else
				arg.each do |value|
					begin
						cls = eval value
						if Class === cls
							@exceptions << cls
						end
					rescue Exception
					end
				end
			end
		end
		opts.on
		rest = opts.parse(ARGV)
		rest.each do |arg|
			list = arg.split(",")
			@includes += list
		end
	end
end

RDot.scan_modules(! RDot::Options.includes.include?("optparse"))

RDot::Options.excludes.each do |lib|
	require lib
end

RDot.scan_modules(true)

RDot::Options.includes.each do |lib|
	require lib
end

require "pp"

pp RDot::sources

